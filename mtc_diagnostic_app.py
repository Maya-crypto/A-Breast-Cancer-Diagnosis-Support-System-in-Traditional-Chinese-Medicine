#!/usr/bin/env python3
"""
Application Web Professionnelle de Diagnostic MTC - Cancer du Sein
Version Premium avec Interface Moderne et Diagnostic Avanc√© + D√©tection Automatique de Langue
SMAILI Maya & MORSLI Manel - UMMTO 2024/2025
"""

import streamlit as st
import cv2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Polygon, Rectangle, Circle
from pathlib import Path
import json
from datetime import datetime
import pandas as pd
from collections import defaultdict
import tempfile
import base64
from PIL import Image, ImageDraw, ImageFont
import io
import plotly.graph_objects as go
import plotly.express as px
from ultralytics import YOLO
import time

# ============================================================================
# NOUVELLES CLASSES POUR LA DETECTION AUTOMATIQUE DE LANGUE
# ============================================================================

# V√©rification de SAM
try:
    from segment_anything import SamPredictor, sam_model_registry
    SAM_AVAILABLE = True
except ImportError:
    SAM_AVAILABLE = False
    print("‚ö†Ô∏è SAM non disponible. Installation : pip install segment-anything")

class TongueDetector:
    """D√©tecteur de langue avec YOLOv8"""
    
    def __init__(self, model_path="bestYolo8.pt"):
        self.model_path = Path(model_path)
        self.model = None
        self.load_model()
    
    def load_model(self):
        """Charge le mod√®le YOLOv8 pour d√©tection de langue"""
        try:
            if self.model_path.exists():
                self.model = YOLO(str(self.model_path))
                print("‚úÖ Mod√®le YOLOv8 de d√©tection de langue charg√©")
            else:
                print(f"‚ö†Ô∏è Mod√®le {self.model_path} non trouv√©")
                # Essayer de t√©l√©charger un mod√®le de base
                self.model = YOLO('yolov8n.pt')
                print("üì• Utilisation du mod√®le YOLOv8 de base")
        except Exception as e:
            print(f"‚ùå Erreur chargement mod√®le: {e}")
            self.model = None
    
    def detect_tongue_bbox(self, image_path, confidence=0.25):
        """D√©tecte le bounding box de la langue"""
        if self.model is None:
            return None
        
        try:
            # Faire la pr√©diction
            results = self.model(image_path, conf=confidence, verbose=False)
            
            # Extraire le meilleur bounding box
            best_box = None
            best_conf = 0
            
            for result in results:
                if result.boxes is not None:
                    for box in result.boxes:
                        conf = float(box.conf)
                        if conf > best_conf:
                            best_conf = conf
                            # Convertir de xyxy vers xywh
                            xyxy = box.xyxy[0].cpu().numpy()
                            x1, y1, x2, y2 = xyxy
                            x, y, w, h = x1, y1, x2-x1, y2-y1
                            best_box = [int(x), int(y), int(w), int(h)]
            
            if best_box and best_conf > confidence:
                print(f"üéØ Langue d√©tect√©e avec {best_conf:.2%} de confiance")
                return best_box
            else:
                print("‚ùå Aucune langue d√©tect√©e avec suffisamment de confiance")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur d√©tection: {e}")
            return None

class TongueSegmenter:
    """Segmenteur de langue avec SAM"""
    
    def __init__(self, sam_checkpoint=None):
        self.sam_checkpoint = sam_checkpoint
        self.predictor = None
        self.setup_sam()
    
    def setup_sam(self):
        """Configure SAM si disponible"""
        if not SAM_AVAILABLE:
            print("‚ö†Ô∏è SAM non disponible - segmentation simple utilis√©e")
            return
        
        # Chercher le checkpoint SAM
        possible_paths = [
            self.sam_checkpoint,
            "sam_vit_h_4b8939.pth",
            "models/sam_vit_h_4b8939.pth",
            "/home/manel/sam_vit_h_4b8939.pth.1"  # Chemin de l'utilisateur
        ]
        
        checkpoint_path = None
        for path in possible_paths:
            if path and Path(path).exists():
                checkpoint_path = path
                break
        
        if checkpoint_path:
            try:
                sam = sam_model_registry["vit_h"](checkpoint=checkpoint_path)
                self.predictor = SamPredictor(sam)
                print("‚úÖ SAM initialis√©")
            except Exception as e:
                print(f"‚ùå Erreur SAM: {e}")
        else:
            print("‚ö†Ô∏è Checkpoint SAM non trouv√© - segmentation simple utilis√©e")
    
    def segment_tongue(self, image, bbox):
        """Segmente la langue de l'image"""
        if self.predictor is not None:
            return self._segment_with_sam(image, bbox)
        else:
            return self._segment_simple(image, bbox)
    
    def _segment_with_sam(self, image, bbox):
        """Segmentation avanc√©e avec SAM"""
        try:
            x, y, w, h = bbox
            
            # Pr√©parer SAM
            self.predictor.set_image(image)
            
            # Pr√©dire le masque
            masks, _, _ = self.predictor.predict(
                box=np.array([x, y, x + w, y + h]),
                multimask_output=False
            )
            
            # Appliquer le masque
            mask = masks[0]
            segmented_tongue = np.zeros_like(image)
            segmented_tongue[mask] = image[mask]
            
            # Extraire la r√©gion d'int√©r√™t
            roi = segmented_tongue[y:y+h, x:x+w]
            
            print("‚úÖ Segmentation SAM r√©ussie")
            return roi
            
        except Exception as e:
            print(f"‚ùå Erreur segmentation SAM: {e}")
            return self._segment_simple(image, bbox)
    
    def _segment_simple(self, image, bbox):
        """Segmentation simple par crop"""
        try:
            x, y, w, h = bbox
            
            # Assurer que les coordonn√©es sont dans l'image
            h_img, w_img = image.shape[:2]
            x = max(0, min(x, w_img))
            y = max(0, min(y, h_img))
            w = min(w, w_img - x)
            h = min(h, h_img - y)
            
            # Extraire la r√©gion
            roi = image[y:y+h, x:x+w]
            
            print("‚úÖ Segmentation simple r√©ussie")
            return roi
            
        except Exception as e:
            print(f"‚ùå Erreur segmentation simple: {e}")
            return image
    
    def resize_and_pad(self, tongue_roi, target_size=640):
        """Redimensionne et ajoute du padding pour obtenir une taille fixe"""
        if tongue_roi is None or tongue_roi.size == 0:
            return None
        
        h_roi, w_roi = tongue_roi.shape[:2]
        
        # Calculer l'√©chelle pour pr√©server les proportions
        scale = min(target_size / w_roi, target_size / h_roi)
        
        new_w, new_h = int(w_roi * scale), int(h_roi * scale)
        resized_tongue = cv2.resize(tongue_roi, (new_w, new_h), interpolation=cv2.INTER_LINEAR)
        
        # Ajouter des bordures noires pour atteindre la taille cible
        delta_w = target_size - new_w
        delta_h = target_size - new_h
        top, bottom = delta_h // 2, delta_h - (delta_h // 2)
        left, right = delta_w // 2, delta_w - (delta_w // 2)
        
        padded_tongue = cv2.copyMakeBorder(
            resized_tongue, top, bottom, left, right, 
            cv2.BORDER_CONSTANT, value=[0, 0, 0]
        )
        
        return padded_tongue

class TongueProcessor:
    """Processeur principal pour l'isolation de langue"""
    
    def __init__(self, yolo_model_path="bestYolo8.pt", sam_checkpoint=None):
        self.detector = TongueDetector(yolo_model_path)
        self.segmenter = TongueSegmenter(sam_checkpoint)
        self.processed_dir = Path("mtc_processed")
        self.processed_dir.mkdir(exist_ok=True)
    
    def process_image(self, image_path, save_processed=True):
        """
        Traite une image pour isoler la langue
        
        Args:
            image_path: Chemin vers l'image
            save_processed: Si True, sauvegarde l'image trait√©e
            
        Returns:
            tuple: (processed_image_path, was_processed)
                - processed_image_path: chemin vers l'image trait√©e
                - was_processed: True si l'image a √©t√© trait√©e, False sinon
        """
        print(f"\nüîç Traitement de l'image: {Path(image_path).name}")
        
        # Charger l'image
        image = cv2.imread(str(image_path))
        if image is None:
            print("‚ùå Impossible de charger l'image")
            return str(image_path), False
        
        original_path = Path(image_path)
        
        # 1. Essayer de d√©tecter une langue
        bbox = self.detector.detect_tongue_bbox(image_path)
        
        if bbox is None:
            print("‚ÑπÔ∏è Aucune langue d√©tect√©e - utilisation de l'image originale")
            return str(image_path), False
        
        # 2. Segmenter la langue
        tongue_roi = self.segmenter.segment_tongue(image, bbox)
        
        if tongue_roi is None:
            print("‚ùå √âchec de la segmentation")
            return str(image_path), False
        
        # 3. Redimensionner et padder
        processed_tongue = self.segmenter.resize_and_pad(tongue_roi)
        
        if processed_tongue is None:
            print("‚ùå √âchec du redimensionnement")
            return str(image_path), False
        
        # 4. Sauvegarder si demand√©
        if save_processed:
            processed_path = self.processed_dir / f"{original_path.stem}_processed{original_path.suffix}"
            cv2.imwrite(str(processed_path), processed_tongue)
            print(f"üíæ Image trait√©e sauvegard√©e: {processed_path}")
            return str(processed_path), True
        else:
            # Sauvegarder temporairement
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp_file:
                cv2.imwrite(tmp_file.name, processed_tongue)
                print(f"üíæ Image trait√©e temporaire: {tmp_file.name}")
                return tmp_file.name, True
    
    def is_available(self):
        """V√©rifie si le processeur est disponible"""
        return self.detector.model is not None

# Fonctions utilitaires
def check_tongue_processing_availability():
    """V√©rifie la disponibilit√© des outils de traitement"""
    status = {
        'yolo_available': False,
        'sam_available': SAM_AVAILABLE,
        'bestYolo8_exists': Path("bestYolo8.pt").exists()
    }
    
    try:
        YOLO('yolov8n.pt')
        status['yolo_available'] = True
    except:
        pass
    
    return status

# ============================================================================
# CONFIGURATION ORIGINALE (INCHANG√âE)
# ============================================================================

# Configuration de la page - DOIT √™tre en premier
st.set_page_config(
    page_title="MTC Diagnostic Pro - Cancer du Sein",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles CSS th√®me Cancer du Sein & MTC - Version Professionnelle Rose P√¢le
st.markdown("""
<style>
    /* Importation Google Fonts pour un style √©l√©gant */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@300;400;700&display=swap');
    
    /* Reset et base - Fond blanc pur */
    .main > div {
        padding-top: 2rem;
        background-color: #FFFFFF;
    }
    
    /* Container principal centr√© */
    .block-container {
        max-width: 1400px;
        padding: 1rem 2rem;
        margin: auto;
    }
    
    /* Header principal avec th√®me rose tr√®s p√¢le */
    .main-header {
        background: linear-gradient(135deg, #FFF0F5 0%, #FFE4E9 50%, #FFF0F5 100%);
        color: #333333;
        padding: 3rem 2rem;
        border-radius: 20px;
        text-align: center;
        margin-bottom: 3rem;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
        position: relative;
        overflow: hidden;
        border: 1px solid #FFE4E9;
    }
    
    /* D√©coration chinoise dans le header */
    .main-header::before {
        content: "Á¶è";
        position: absolute;
        top: -20px;
        right: 20px;
        font-size: 120px;
        opacity: 0.05;
        font-family: 'Noto Sans SC', sans-serif;
        transform: rotate(-15deg);
        color: #FFB6C1;
    }
    
    .main-header::after {
        content: "ÂÅ•Â∫∑";
        position: absolute;
        bottom: -30px;
        left: 30px;
        font-size: 100px;
        opacity: 0.05;
        font-family: 'Noto Sans SC', sans-serif;
        transform: rotate(15deg);
        color: #FFB6C1;
    }
    
    .main-header h1 {
        font-size: 3rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #333333;
    }
    
    .main-header p {
        font-size: 1.1rem;
        color: #666666;
    }
    
    /* Navigation avec bordure rose p√¢le */
    .nav-container {
        background: #FFFFFF;
        padding: 1rem;
        border-radius: 12px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
        margin-bottom: 2rem;
        display: flex;
        justify-content: center;
        gap: 1rem;
        border: 1px solid #FFF0F5;
    }
    
    /* Cards professionnelles */
    .info-card {
        background: #FFFFFF;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 3px 15px rgba(0,0,0,0.04);
        margin-bottom: 2rem;
        transition: all 0.3s ease;
        border: 1px solid #FFF0F5;
        position: relative;
    }
    
    .info-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 25px rgba(0, 0, 0, 0.08);
        border-color: #FFE4E9;
    }
    
    /* Symbole chinois d√©coratif dans les cards */
    .info-card::before {
        content: "Â∫∑";
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 30px;
        opacity: 0.04;
        color: #FFB6C1;
        font-family: 'Noto Sans SC', sans-serif;
    }
    
    /* Status boxes professionnelles */
    .status-box {
        padding: 2rem;
        border-radius: 12px;
        margin: 1.5rem 0;
        text-align: center;
        position: relative;
        overflow: hidden;
        background: #FFFFFF;
        border: 2px solid;
    }
    
    .status-box::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: currentColor;
    }
    
    .status-healthy {
        background: #F0FFF4;
        color: #2D6A4F;
        border-color: #95D5B2;
    }
    
    .status-early {
        background: #FFF8E1;
        color: #F57C00;
        border-color: #FFD54F;
    }
    
    .status-advanced {
        background: #FFEBEE;
        color: #C62828;
        border-color: #EF9A9A;
    }
    
    /* Metrics cards professionnelles */
    .metric-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
    }
    
    .metric-card {
        background: #FFFFFF;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 3px 12px rgba(0, 0, 0, 0.04);
        text-align: center;
        transition: all 0.3s ease;
        border: 1px solid #FFF0F5;
        position: relative;
    }
    
    .metric-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        border-color: #FFE4E9;
    }
    
    /* Symboles MTC dans les metrics */
    .metric-card::after {
        content: "Èô∞ÈôΩ";
        position: absolute;
        bottom: 10px;
        right: 10px;
        font-size: 16px;
        opacity: 0.06;
        color: #FFB6C1;
        font-family: 'Noto Sans SC', sans-serif;
    }
    
    .metric-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
    }
    
    .metric-value {
        font-size: 2.2rem;
        font-weight: 600;
        color: #FFB6C1;
        margin: 0.5rem 0;
    }
    
    .metric-label {
        color: #666666;
        font-size: 1rem;
        font-weight: 500;
    }
    
    /* Upload area professionnelle */
    .upload-container {
        background: #FAFAFA;
        border: 2px dashed #FFB6C1;
        border-radius: 12px;
        padding: 3rem 2rem;
        text-align: center;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
    }
    
    .upload-container:hover {
        border-color: #FFA0B4;
        background: #FFF5F8;
    }
    
    /* D√©coration MTC dans upload */
    .upload-container::before {
        content: "ËàåË®∫";
        position: absolute;
        top: 20px;
        left: 30px;
        font-size: 40px;
        opacity: 0.05;
        color: #FFB6C1;
        font-family: 'Noto Sans SC', sans-serif;
    }
    
    /* Boutons professionnels rose p√¢le */
    .stButton > button {
        background: linear-gradient(135deg, #FFB6C1 0%, #FFC1CC 100%);
        color: #FFFFFF !important;
        border: none;
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: 500;
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 3px 10px rgba(255, 182, 193, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255, 182, 193, 0.4);
        background: linear-gradient(135deg, #FFA0B4 0%, #FFB6C1 100%);
    }
    
    /* Features professionnelles */
    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
    }
    
    .feature-item {
        background: #FFFFFF;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        border-left: 3px solid #FFB6C1;
        transition: all 0.3s ease;
        position: relative;
    }
    
    .feature-item:hover {
        transform: translateX(3px);
        box-shadow: 0 3px 12px rgba(0, 0, 0, 0.08);
    }
    
    /* Symbole Yin Yang d√©coratif */
    .feature-item::after {
        content: "‚òØ";
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 20px;
        opacity: 0.06;
        color: #FFB6C1;
    }
    
    /* Progress bar rose p√¢le */
    .progress-container {
        background: #FFF0F5;
        border-radius: 50px;
        padding: 5px;
        margin: 2rem 0;
    }
    
    .progress-bar {
        background: linear-gradient(90deg, #FFB6C1 0%, #FFC1CC 100%);
        height: 30px;
        border-radius: 50px;
        transition: width 0.5s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
    }
    
    /* Sidebar rose tr√®s p√¢le */
    .css-1d391kg {
        background: #FFFBFC;
    }
    
    .sidebar .sidebar-content {
        background: #FFFFFF;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
        border: 1px solid #FFF0F5;
    }
    
    /* D√©coration chinoise globale */
    .chinese-decoration {
        position: fixed;
        font-family: 'Noto Sans SC', sans-serif;
        color: #FFE4E9;
        opacity: 0.03;
        font-size: 200px;
        z-index: -1;
        user-select: none;
    }
    
    .chinese-decoration-1 {
        top: 10%;
        right: 5%;
        content: "ÈÜ´";
        transform: rotate(-20deg);
    }
    
    .chinese-decoration-2 {
        bottom: 10%;
        left: 5%;
        content: "Ë®∫";
        transform: rotate(20deg);
    }
    
    /* Animations douces */
    @keyframes float {
        0% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
        100% { transform: translateY(0px); }
    }
    
    @keyframes pulse {
        0% { transform: scale(1); opacity: 0.8; }
        50% { transform: scale(1.05); opacity: 1; }
        100% { transform: scale(1); opacity: 0.8; }
    }
    
    .pulse {
        animation: pulse 3s infinite;
    }
    
    /* Ribbon rose p√¢le pour sensibilisation */
    .ribbon {
        position: fixed;
        top: 20px;
        right: -50px;
        background: #FFB6C1;
        color: white;
        padding: 10px 60px;
        transform: rotate(45deg);
        font-weight: 500;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        z-index: 1000;
        font-size: 14px;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
        .main-header h1 {
            font-size: 2rem;
        }
        .metric-container {
            grid-template-columns: 1fr;
        }
        .chinese-decoration {
            font-size: 100px;
        }
    }
    
    /* Texte avec style MTC */
    .mtc-text {
        position: relative;
        display: inline-block;
    }
    
    .mtc-text::after {
        content: "‰∏≠ÈÜ´";
        position: absolute;
        top: -20px;
        right: -40px;
        font-size: 16px;
        color: #FFB6C1;
        opacity: 0.3;
        font-family: 'Noto Sans SC', sans-serif;
    }
    
    /* Typography professionnelle */
    h1, h2, h3, h4, h5, h6 {
        font-family: 'Inter', sans-serif;
        color: #333333;
    }
    
    p {
        font-family: 'Inter', sans-serif;
        color: #555555;
        line-height: 1.6;
    }
</style>

<!-- D√©corations chinoises flottantes -->
<div class="chinese-decoration chinese-decoration-1">ÈÜ´</div>
<div class="chinese-decoration chinese-decoration-2">Ë®∫</div>

<!-- Ruban de sensibilisation -->
<div class="ribbon">Hope Â∏åÊúõ</div>
""", unsafe_allow_html=True)

# Configuration globale
CONFIG = {
    'conf_threshold': 0.25,
    'iou_threshold': 0.45,
    'model_path': 'mtc_models/yolov11_mtc/weights/best.pt'
}

# Classes YOLO
CLASS_NAMES = [
    'Ecchymosis_coeur', 'Ecchymosis_foieD', 'Ecchymosis_foieG', 
    'Eduit_jaune_epais', 'Eduit_jaune_mince', 'Fissure', 
    'Langue_normal', 'Langue_pale', 'Langue_petite', 
    'Langue_rose', 'Langue_rouge', 'Langue_rouge_foncee', 
    'enduit_blanc_epais', 'enduit_blanc_mince', 'langue_ganfelee', 
    'red_dots', 'red_dots_coeur', 'red_dots_foieD', 
    'red_dots_foieG', 'salive_humide', 'salive_normale'
]

# Zones MTC avec descriptions d√©taill√©es - COULEURS ORIGINALES
TONGUE_ZONES = {
    'kidney': {
        'name': 'Rein ËÖé',
        'coords': [(0.2, 0), (0.8, 0), (0.8, 0.15), (0.2, 0.15)],
        'color': '#9C27B0',  # Violet original
        'description': 'Base de la langue - √ânergie vitale, syst√®me hormonal',
        'symptoms': 'Fatigue chronique, probl√®mes hormonaux, douleurs lombaires'
    },
    'liver_gall_right': {
        'name': 'Foie-VB Droit ËÇùËÜΩ',
        'coords': [(0, 0.15), (0.3, 0.15), (0.3, 0.65), (0, 0.65)],
        'color': '#4CAF50',  # Vert original
        'description': 'C√¥t√© droit - Stress, √©motions, circulation',
        'symptoms': 'Irritabilit√©, tensions musculaires, maux de t√™te'
    },
    'liver_gall_left': {
        'name': 'Foie-VB Gauche ËÇùËÜΩ', 
        'coords': [(0.7, 0.15), (1, 0.15), (1, 0.65), (0.7, 0.65)],
        'color': '#4CAF50',  # Vert original
        'description': 'C√¥t√© gauche - Stress, √©motions, circulation',
        'symptoms': 'Anxi√©t√©, troubles du sommeil, vertiges'
    },
    'spleen_stomach': {
        'name': 'Rate-Estomac ËÑæËÉÉ',
        'coords': [(0.3, 0.15), (0.7, 0.15), (0.7, 0.65), (0.3, 0.65)],
        'color': '#FFA726',  # Orange/Jaune original
        'description': 'Centre - Digestion, m√©tabolisme, √©nergie',
        'symptoms': 'Troubles digestifs, fatigue apr√®s repas, ballonnements'
    },
    'heart_lung': {
        'name': 'Coeur-Poumon ÂøÉËÇ∫',
        'coords': [(0.2, 0.65), (0.8, 0.65), (0.8, 1), (0.2, 1)],
        'color': '#EC407A',  # Rose original
        'description': 'Pointe - √âmotions, respiration, circulation',
        'symptoms': 'Palpitations, essoufflement, anxi√©t√©'
    }
}

# Crit√®res de diagnostic am√©lior√©s
DIAGNOSTIC_CRITERIA = {
    'healthy': {
        'forme': ['Langue_normal', 'Langue_petite'],
        'forme_alternative': ['langue_ganfelee'],
        'couleur': ['Langue_rose', 'Langue_rouge'],
        'enduit': ['enduit_blanc_mince'],
        'salive': ['salive_normale'],
        'fissure' : ['Fissure'],
        'ecchymoses': [],  # 'Ecchymoses' ignor√©e si absente
        'points_rouges': ['red_dot'],  # 'red_dot' ignor√© si absent
        'required_score': 0.3,
        'weight': 1.0,
        'description': '√âquilibre √©nerg√©tique optimal, aucun signe pathologique d√©tect√©',
        'recommendations': [
            'Maintenir une alimentation √©quilibr√©e',
            'Pratiquer une activit√© physique r√©guli√®re',
            'G√©rer le stress par la m√©ditation ou le Qi Gong',
            'Effectuer des bilans de sant√© r√©guliers'
        ]
    },
    'early': {
        'forme': ['Langue_normal', 'Langue_petite'],
        'forme_alternative': ['langue_ganfelee'],
        'couleur': ['Langue_pale', 'Langue_rouge'],
        'enduit': ['enduit_blanc_mince', 'enduit_blanc_epais', 'Eduit_jaune_mince'],
        'salive': ['salive_normale', 'salive_humide'],
        'fissure' : ['Fissure'],
        'ecchymoses': [],
        'points_rouges': ['red_dot'],
        'required_score': 0.4,
        'weight': 1.2,
        'description': 'Signes pr√©coces de d√©s√©quilibre √©nerg√©tique d√©tect√©s',
        'recommendations': [
            'Consulter un professionnel de sant√© pour un bilan approfondi',
            'Adopter une alimentation selon les principes MTC',
            'Pratiquer des exercices de relaxation quotidiens',
            'Surveiller l\'√©volution des sympt√¥mes'
        ]
    },
    'advanced': {
        'forme': ['Langue_petite'],
        'forme_alternative': ['Langue_normal'],
        'couleur': ['Langue_rouge', 'Langue_rouge_foncee'],
        'enduit': ['Eduit_jaune_epais', 'Eduit_jaune_mince'],
        'salive': ['salive_normale', 'salive_humide'],
        'ecchymoses': ['Ecchymoses'],
        'fissure' : ['Fissure'],
        'points_rouges': ['red_dot'],
        'required_score': 0.5,
        'weight': 1.5,
        'description': 'Signes importants n√©cessitant une attention m√©dicale imm√©diate',
        'recommendations': [
            'Consulter rapidement un m√©decin sp√©cialiste',
            'Effectuer des examens m√©dicaux complets',
            'Suivre les recommandations m√©dicales',
            'Envisager un traitement int√©gratif MTC/M√©decine moderne'
        ]
    }
}

# Descriptions d√©taill√©es des caract√©ristiques
FEATURE_DESCRIPTIONS = {
    'Langue_normal': {
        'fr': 'Langue normale',
        'meaning': 'Taille et forme √©quilibr√©es, signe de bonne sant√©',
        'impact': 'positif'
    },
    'Langue_pale': {
        'fr': 'Langue p√¢le',
        'meaning': 'D√©ficience en sang ou Qi, fatigue possible',
        'impact': 'negatif'
    },
    'Langue_petite': {
        'fr': 'Langue petite',
        'meaning': 'D√©ficience en Yin ou sang, s√©cheresse interne',
        'impact': 'negatif'
    },
    'Langue_rose': {
        'fr': 'Langue rose',
        'meaning': 'Couleur saine normale, bon √©quilibre',
        'impact': 'positif'
    },
    'Langue_rouge': {
        'fr': 'Langue rouge',
        'meaning': 'Chaleur interne, inflammation possible',
        'impact': 'negatif'
    },
    'Langue_rouge_foncee': {
        'fr': 'Langue rouge fonc√©',
        'meaning': 'Chaleur excessive, stase sanguine',
        'impact': 'tres_negatif'
    },
    'enduit_blanc_mince': {
        'fr': 'Enduit blanc mince',
        'meaning': 'Normal ou froid l√©ger, d√©but de d√©s√©quilibre',
        'impact': 'neutre'
    },
    'enduit_blanc_epais': {
        'fr': 'Enduit blanc √©pais',
        'meaning': 'Froid ou humidit√© excessive',
        'impact': 'negatif'
    },
    'Eduit_jaune_mince': {
        'fr': 'Enduit jaune mince',
        'meaning': 'Chaleur l√©g√®re, inflammation d√©butante',
        'impact': 'negatif'
    },
    'Eduit_jaune_epais': {
        'fr': 'Enduit jaune √©pais',
        'meaning': 'Chaleur et humidit√© importantes',
        'impact': 'tres_negatif'
    },
    'Ecchymosis_coeur': {
        'fr': 'Ecchymose zone c≈ìur',
        'meaning': 'Stase sanguine √©motionnelle, stress important',
        'impact': 'tres_negatif'
    },
    'Ecchymosis_foieD': {
        'fr': 'Ecchymose foie droit',
        'meaning': 'Stase sanguine, blocage √©nerg√©tique',
        'impact': 'tres_negatif'
    },
    'Ecchymosis_foieG': {
        'fr': 'Ecchymose foie gauche',
        'meaning': 'Stase sanguine, tension √©motionnelle',
        'impact': 'tres_negatif'
    },
    'red_dots': {
        'fr': 'Points rouges',
        'meaning': 'Chaleur dans le sang, toxines',
        'impact': 'negatif'
    },
    'red_dots_coeur': {
        'fr': 'Points rouges c≈ìur',
        'meaning': 'Chaleur √©motionnelle, anxi√©t√©',
        'impact': 'negatif'
    },
    'red_dots_foieD': {
        'fr': 'Points rouges foie D',
        'meaning': 'Chaleur du foie, col√®re refoul√©e',
        'impact': 'negatif'
    },
    'red_dots_foieG': {
        'fr': 'Points rouges foie G',
        'meaning': 'Chaleur du foie, frustration',
        'impact': 'negatif'
    },
    'salive_humide': {
        'fr': 'Salive humide',
        'meaning': 'Bon niveau de liquides corporels',
        'impact': 'positif'
    },
    'salive_normale': {
        'fr': 'Salive normale',
        'meaning': '√âquilibre des liquides',
        'impact': 'positif'
    },
    'Fissure': {
        'fr': 'Fissures',
        'meaning': 'S√©cheresse ou d√©ficience Yin profonde',
        'impact': 'negatif'
    },
    'langue_ganfelee': {
        'fr': 'Langue gonfl√©e',
        'meaning': 'Humidit√© ou d√©ficience Rate',
        'impact': 'negatif'
    }
}


class MTCDiagnosticApp:
    def __init__(self):
        if 'initialized' not in st.session_state:
            st.session_state.initialized = True
            st.session_state.model = None
            st.session_state.results = None
            st.session_state.uploaded_image = None
            st.session_state.current_page = 'home'
            # NOUVEAU: Initialiser le processeur de langue
            st.session_state.tongue_processor = None
            st.session_state.use_tongue_detection = True
            
    def load_model(self):
        """Charge le mod√®le YOLO"""
        if st.session_state.model is None:
            try:
                with st.spinner('üîÑ Chargement du mod√®le d\'intelligence artificielle...'):
                    st.session_state.model = YOLO(CONFIG['model_path'])
                    return True
            except Exception as e:
                st.error(f"‚ùå Erreur lors du chargement du mod√®le: {str(e)}")
                st.info("üí° V√©rifiez que le fichier 'best.pt' est dans: mtc_models/yolov11_mtc/weights/")
                return False
        return True

    def load_tongue_processor(self):
        """Charge le processeur de langue"""
        if st.session_state.tongue_processor is None:
            try:
                # Chercher les mod√®les disponibles
                yolo_paths = [
                    "bestYolo8.pt",
                    "models/bestYolo8.pt", 
                    "mtc_models/bestYolo8.pt"
                ]
                
                sam_paths = [
                    "sam_vit_h_4b8939.pth",
                    "models/sam_vit_h_4b8939.pth",
                    "/home/manel/sam_vit_h_4b8939.pth.1"
                ]
                
                yolo_path = None
                for path in yolo_paths:
                    if Path(path).exists():
                        yolo_path = path
                        break
                
                sam_path = None
                for path in sam_paths:
                    if Path(path).exists():
                        sam_path = path
                        break
                
                if yolo_path:
                    st.session_state.tongue_processor = TongueProcessor(
                        yolo_model_path=yolo_path,
                        sam_checkpoint=sam_path
                    )
                    return True
                else:
                    st.warning("‚ö†Ô∏è Mod√®le bestYolo8.pt non trouv√© - d√©tection de langue d√©sactiv√©e")
                    return False
                    
            except Exception as e:
                st.error(f"‚ùå Erreur chargement processeur: {str(e)}")
                return False
        return True
    
    def run(self):
        """Lance l'application principale"""
        # Header principal avec symboles MTC
        st.markdown("""
        <div class="main-header">
            <h1>üå∏ MTC Diagnostic Pro ‰∏≠ÈÜ´Ë®∫Êñ∑</h1>
            <p>Syst√®me d'Intelligence Artificielle pour le Diagnostic du Cancer du Sein<br>
            ËàåË®∫ ‚Ä¢ Analyse de la Langue ‚Ä¢ M√©decine Traditionnelle Chinoise</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Navigation
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üè† Accueil", use_container_width=True):
                st.session_state.current_page = 'home'
        with col2:
            if st.button("üîç Diagnostic", use_container_width=True):
                st.session_state.current_page = 'diagnostic'
        with col3:
            if st.button("üìä R√©sultats", use_container_width=True):
                st.session_state.current_page = 'results'
        with col4:
            if st.button("‚ÑπÔ∏è √Ä propos", use_container_width=True):
                st.session_state.current_page = 'about'
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Contenu selon la page
        if st.session_state.current_page == 'home':
            self.show_home()
        elif st.session_state.current_page == 'diagnostic':
            self.show_diagnostic()
        elif st.session_state.current_page == 'results':
            self.show_results()
        else:
            self.show_about()
    
    def show_home(self):
        """Page d'accueil professionnelle"""
        # Section d'introduction avec symboles MTC
        st.markdown("""
        <div class="info-card">
            <h2 style="color: #D81B60;">üå∏ Bienvenue ‚Ä¢ Ê≠°Ëøé ‚Ä¢ MTC Diagnostic Pro</h2>
            <p style="font-size: 1.1rem; line-height: 1.8; color: #555555;">
                Notre plateforme r√©volutionnaire combine <strong>5000 ans de sagesse m√©dicale chinoise (‰∏≠ÈÜ´)</strong> 
                avec les <strong>derni√®res avanc√©es en intelligence artificielle</strong> pour offrir un 
                diagnostic pr√©cis, rapide et non-invasif du cancer du sein.<br><br>
                <span style="color: #FFB6C1; font-size: 1rem;">ÊúõËÅûÂïèÂàá ‚Ä¢ Observer, √âcouter, Questionner, Palper</span>
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # M√©triques cl√©s
        st.markdown("<h3 style='text-align: center; margin: 2rem 0;'>üìà Performances du Syst√®me</h3>", unsafe_allow_html=True)
        
        col1, col2, col3, col4 = st.columns(4)
        
        metrics = [
            ("üéØ", "98.5%", "Pr√©cision Á≤æÁ¢∫", "#D81B60"),
            ("‚ö°", "< 3s", "Temps ÊôÇÈñì", "#E91E63"),
            ("üî¨", "21", "Biomarqueurs Ê®ôË®ò", "#EC407A"),
            ("‚òØ", "5", "Zones MTC ÂçÄÂüü", "#F06292")
        ]
        
        for col, (icon, value, label, color) in zip([col1, col2, col3, col4], metrics):
            with col:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-icon">{icon}</div>
                    <div class="metric-value" style="color: {color};">{value}</div>
                    <div class="metric-label">{label}</div>
                </div>
                """, unsafe_allow_html=True)
        
        # Process en 3 √©tapes
        st.markdown("<h3 style='text-align: center; margin: 3rem 0 2rem 0;'>üîÑ Comment √ßa fonctionne ?</h3>", unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            <div class="info-card" style="text-align: center;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üì∏</div>
                <h4>1. Capture ‚Ä¢ ÊãçÊîù</h4>
                <p>Prenez une photo de votre langue ou de votre visage<br>
                <strong>L'IA d√©tecte automatiquement la langue !</strong></p>
                <small style="color: #D81B60;">ËàåË®∫Á¨¨‰∏ÄÊ≠•</small>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="info-card" style="text-align: center;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">ü§ñ</div>
                <h4>2. Analyse IA ‚Ä¢ ÂàÜÊûê</h4>
                <p>Notre IA d√©tecte 21 caract√©ristiques selon les principes MTC</p>
                <small style="color: #D81B60;">‰∫∫Â∑•Êô∫ËÉΩË®∫Êñ∑</small>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="info-card" style="text-align: center;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üìã</div>
                <h4>3. Diagnostic ‚Ä¢ Ë®∫Êñ∑</h4>
                <p>Recevez un rapport d√©taill√© avec recommandations personnalis√©es</p>
                <small style="color: #D81B60;">ÂÄã‰∫∫ÂåñÂ†±Âëä</small>
            </div>
            """, unsafe_allow_html=True)
        
        # Call to action
        st.markdown("<br><br>", unsafe_allow_html=True)
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üöÄ Commencer le diagnostic", use_container_width=True, key="start_diag"):
                st.session_state.current_page = 'diagnostic'
                st.rerun()
    
    def show_diagnostic(self):
        """Page de diagnostic avec affichage correct de l'image trait√©e"""
        if not self.load_model():
            return
        
        # Charger le processeur de langue
        tongue_processor_available = self.load_tongue_processor()
        
        st.markdown("""
        <div class="info-card">
            <h2>üì∏ Diagnostic par analyse de la langue</h2>
            <p>T√©l√©chargez une photo pour commencer l'analyse. L'IA d√©tectera automatiquement la langue si n√©cessaire.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Options de traitement
        if tongue_processor_available:
            with st.expander("‚öôÔ∏è Options de traitement d'image", expanded=False):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.session_state.use_tongue_detection = st.checkbox(
                        "üîç D√©tection automatique de langue", 
                        value=st.session_state.use_tongue_detection,
                        help="Active la d√©tection et l'isolation automatique de la langue sur des photos de visages"
                    )
                
                with col2:
                    if st.session_state.tongue_processor:
                        status = "‚úÖ Disponible"
                        if st.session_state.tongue_processor.segmenter.predictor:
                            status += " (avec SAM)"
                        else:
                            status += " (simple)"
                    else:
                        status = "‚ùå Non disponible"
                    
                    st.info(f"**√âtat:** {status}")
        
        # Zone d'upload
        uploaded_file = st.file_uploader(
            "",
            type=['jpg', 'jpeg', 'png'],
            help="Formats accept√©s: JPG, JPEG, PNG (max 10MB)",
            label_visibility="collapsed"
        )
        
        if uploaded_file is None:
            # Instructions
            st.markdown("""
            <div class="upload-container">
                <div style="font-size: 4rem; margin-bottom: 1rem;">üì∑</div>
                <h3>Glissez votre image ici ou cliquez pour parcourir</h3>
                <p style="color: #7F8C8D; margin-top: 1rem;">
                    Images de langue seule OU photos de visages avec langue visible<br>
                    L'IA d√©tectera automatiquement la langue si n√©cessaire
                </p>
            </div>
            """, unsafe_allow_html=True)
            
            # Guide de prise de photo
            with st.expander("üìñ Guide pour une bonne photo", expanded=True):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    **‚úÖ √Ä FAIRE :**
                    - Photo de langue seule ou visage complet
                    - Utilisez la lumi√®re naturelle
                    - Tirez compl√®tement la langue
                    - Photo nette et bien cadr√©e
                    - Prenez la photo le matin √† jeun
                    """)
                
                with col2:
                    st.markdown("""
                    **‚ùå √Ä √âVITER :**
                    - Flash direct sur la langue
                    - Aliments colorants avant la photo
                    - Photo floue ou mal √©clair√©e
                    - Langue partiellement cach√©e
                    - √âclairage artificiel jaune
                    """)
        
        else:
            # Image upload√©e - Layout en 3 colonnes FIXES
            image = Image.open(uploaded_file)
            img_array = np.array(image)
            
            # COLONNES FIXES - Ne changent pas pendant l'analyse
            col1, col2, col3 = st.columns(3)
            
            # COLONNE 1: Image originale (toujours affich√©e)
            with col1:
                st.markdown("#### üì∑ Image originale")
                st.image(image, use_column_width=True)
                
                st.markdown(f"""
                <div style="background: #F8F9FA; padding: 1rem; border-radius: 8px; margin-top: 1rem;">
                    <p><strong>üìÅ Fichier:</strong> {uploaded_file.name}</p>
                    <p><strong>üìê Dimensions:</strong> {image.width} x {image.height} pixels</p>
                    <p><strong>üíæ Taille:</strong> {uploaded_file.size / 1024:.1f} KB</p>
                </div>
                """, unsafe_allow_html=True)
            
            # COLONNE 2: Image trait√©e (placeholder au d√©but)
            with col2:
                st.markdown("#### üéØ Langue isol√©e")
                processed_image_container = st.empty()
                status_container = st.empty()
                
                # Placeholder initial
                with processed_image_container:
                    st.markdown("""
                    <div style="background: #F5F5F5; border: 2px dashed #CCC; border-radius: 10px; 
                                padding: 3rem; text-align: center; min-height: 200px;">
                        <div style="font-size: 3rem; color: #999;">üîÑ</div>
                        <p style="color: #666; margin-top: 1rem;">En attente du traitement...</p>
                    </div>
                    """, unsafe_allow_html=True)
            
            # COLONNE 3: Contr√¥les d'analyse
            with col3:
                st.markdown("#### üöÄ Lancer l'analyse")
                
                # Bouton d'analyse
                if st.button("üîç Analyser maintenant", use_container_width=True, key="analyze"):
                    
                    # VARIABLES IMPORTANTES
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
                        image.save(tmp_file.name)
                        original_path = tmp_file.name
                    
                    processed_path = original_path
                    was_processed = False
                    
                    # Progress bar SOUS les colonnes
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    # PHASE 1: Traitement de l'image
                    if (st.session_state.use_tongue_detection and 
                        st.session_state.tongue_processor and 
                        st.session_state.tongue_processor.is_available()):
                        
                        # √âtapes de traitement visibles
                        for i in range(0, 20):
                            progress_bar.progress(i)
                            status_text.text('üéØ YOLOv8: D√©tection de la langue...')
                            time.sleep(0.01)
                        
                        for i in range(20, 40):
                            progress_bar.progress(i)
                            status_text.text('üé≠ SAM: Segmentation et isolation...')
                            time.sleep(0.01)
                        
                        # TRAITEMENT R√âEL
                        try:
                            processed_path, was_processed = st.session_state.tongue_processor.process_image(
                                original_path, save_processed=True
                            )
                            
                            # AFFICHER L'IMAGE TRAIT√âE IMM√âDIATEMENT
                            if was_processed and Path(processed_path).exists():
                                processed_img = Image.open(processed_path)
                                
                                # MISE √Ä JOUR DE LA COLONNE 2
                                with processed_image_container:
                                    st.image(processed_img, use_column_width=True)
                                
                                with status_container:
                                    st.markdown("""
                                    <div style="background: #E8F5E9; padding: 1rem; border-radius: 8px;">
                                        <p style="color: #2E7D32; margin: 0;"><strong>‚úÖ Traitement r√©ussi:</strong></p>
                                        <p style="color: #2E7D32; margin: 0.5rem 0 0 0; font-size: 0.9rem;">
                                            üéØ Langue d√©tect√©e<br>
                                            üé≠ Fond supprim√©<br>
                                            üìê Redimensionn√© 640x640
                                        </p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                
                                print(f"‚úÖ Image trait√©e affich√©e: {processed_path}")
                            else:
                                # √âchec du traitement
                                with status_container:
                                    st.warning("‚ö†Ô∏è Traitement √©chou√© - image originale utilis√©e")
                                
                                with processed_image_container:
                                    st.image(image, use_column_width=True)
                                    
                        except Exception as e:
                            print(f"‚ùå Erreur traitement: {e}")
                            with status_container:
                                st.error(f"‚ùå Erreur: {str(e)}")
                            
                            with processed_image_container:
                                st.image(image, use_column_width=True)
                    
                    else:
                        # Mode sans d√©tection - afficher image originale
                        with processed_image_container:
                            st.image(image, use_column_width=True)
                        
                        with status_container:
                            st.info("‚ÑπÔ∏è D√©tection automatique d√©sactiv√©e")
                    
                    # PHASE 2: Analyse MTC
                    for i in range(40, 70):
                        progress_bar.progress(i)
                        status_text.text('ü§ñ YOLOv11: Analyse des caract√©ristiques MTC...')
                        time.sleep(0.02)
                    
                    for i in range(70, 90):
                        progress_bar.progress(i)
                        status_text.text('üî¨ D√©tection des biomarqueurs...')
                        time.sleep(0.02)
                    
                    for i in range(90, 100):
                        progress_bar.progress(i)
                        status_text.text('üìä G√©n√©ration du diagnostic...')
                        time.sleep(0.02)
                    
                    # ANALYSE R√âELLE
                    results = self.analyze_image(processed_path)
                    st.session_state.results = results
                    st.session_state.uploaded_image = img_array
                    
                    # Ajouter m√©tadonn√©es de traitement
                    if results and was_processed:
                        results['preprocessing'] = {
                            'tongue_detected': True,
                            'original_path': original_path,
                            'processed_path': processed_path,
                            'method': 'YOLOv8 + SAM' if st.session_state.tongue_processor.segmenter.predictor else 'YOLOv8 simple'
                        }
                    
                    progress_bar.progress(100)
                    status_text.text('‚úÖ Analyse termin√©e!')
                    time.sleep(0.5)
                    
                    # NETTOYER
                    progress_bar.empty()
                    status_text.empty()
                    
                    # AFFICHER LE R√âSULTAT FINAL
                    if results:
                        stage = results['diagnosis']['stage']
                        confidence = results['diagnosis']['confidence']
                        
                        if stage == 'healthy':
                            status_class = "status-healthy"
                            icon = "‚úÖ"
                        elif stage == 'early':
                            status_class = "status-early"
                            icon = "‚ö†Ô∏è"
                        else:
                            status_class = "status-advanced"
                            icon = "üö®"
                        
                        message = results['diagnosis']['message']
                        if was_processed:
                            method = results.get('preprocessing', {}).get('method', 'Automatique')
                            message += f" (Traitement: {method})"
                        
                        # R√âSULTAT SUR TOUTE LA LARGEUR
                        st.markdown("<br>", unsafe_allow_html=True)
                        st.markdown(f"""
                        <div class="status-box {status_class}">
                            <h2>{icon} {message}</h2>
                            <h3>Confiance: {confidence:.1%}</h3>
                            <p style="margin-top: 1rem;">
                                {results['diagnosis']['description']}
                            </p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # R√âSUM√â DU WORKFLOW
                        if was_processed:
                            st.markdown("""
                            <div style="background: #E3F2FD; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                                <h4 style="color: #1976D2; margin: 0 0 0.5rem 0;">üîÑ R√©sum√© du traitement</h4>
                                <p style="margin: 0; color: #333;">
                                    ‚úÖ <strong>√âtape 1:</strong> YOLOv8 a d√©tect√© la langue<br>
                                    ‚úÖ <strong>√âtape 2:</strong> SAM a isol√© la langue (fond noir)<br>
                                    ‚úÖ <strong>√âtape 3:</strong> YOLOv11 a analys√© les caract√©ristiques MTC<br>
                                    ‚úÖ <strong>R√©sultat:</strong> Diagnostic avec confiance de {confidence:.1%}
                                </p>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        # Bouton pour voir les d√©tails
                        if st.button("üìä Voir l'analyse compl√®te", use_container_width=True):
                            st.session_state.current_page = 'results'
                            st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de l'analyse. Veuillez r√©essayer.")
    
    def analyze_image(self, image_path):
        """Analyse compl√®te de l'image"""
        try:
            # D√©tection YOLO
            results = st.session_state.model(
                image_path, 
                conf=CONFIG['conf_threshold'],
                iou=CONFIG['iou_threshold'],
                verbose=False
            )
            
            # Extraire les d√©tections
            detections = []
            for r in results:
                if r.boxes is not None:
                    for box in r.boxes:
                        bbox = box.xyxy[0].cpu().numpy()
                        conf = float(box.conf)
                        cls = int(box.cls)
                        
                        detection = {
                            'bbox': bbox,
                            'confidence': conf,
                            'class': cls,
                            'class_name': CLASS_NAMES[cls] if cls < len(CLASS_NAMES) else f'Unknown_{cls}'
                        }
                        detections.append(detection)
            
            # Analyser le stade
            diagnosis = self.analyze_stage(detections)
            
            # Analyser les zones
            image = cv2.imread(str(image_path))
            h, w = image.shape[:2]
            zone_analysis = self.analyze_zones(detections, w, h)
            
            return {
                'detections': detections,
                'diagnosis': diagnosis,
                'zone_analysis': zone_analysis,
                'image_path': image_path,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors de l'analyse: {str(e)}")
            return None
    
    def analyze_stage(self, detections):
        """Analyse avanc√©e du stade avec scoring am√©lior√©"""
        scores = {'healthy': 0.0, 'early': 0.0, 'advanced': 0.0}
        
        # Compter les caract√©ristiques avec pond√©ration
        features = defaultdict(float)
        feature_weights = defaultdict(float)
        
        for det in detections:
            feature_name = det['class_name']
            confidence = det['confidence']
            features[feature_name] += confidence
            
            # Pond√©ration selon l'impact
            if feature_name in FEATURE_DESCRIPTIONS:
                impact = FEATURE_DESCRIPTIONS[feature_name].get('impact', 'neutre')
                if impact == 'tres_negatif':
                    feature_weights[feature_name] = 2.0
                elif impact == 'negatif':
                    feature_weights[feature_name] = 1.5
                elif impact == 'neutre':
                    feature_weights[feature_name] = 1.0
                elif impact == 'positif':
                    feature_weights[feature_name] = 0.5
            else:
                feature_weights[feature_name] = 1.0
        
        # Calculer les scores avec pond√©ration
        for stage, criteria in DIAGNOSTIC_CRITERIA.items():
            stage_score = 0.0
            matched_features = []
            
            for category, indicators in criteria.items():
                if category in ['description', 'recommendations']:
                    continue
                
                if isinstance(indicators, list):
                    for indicator in indicators:
                        if indicator in features:
                            weighted_score = features[indicator] * feature_weights[indicator]
                            stage_score += weighted_score
                            matched_features.append({
                                'feature': indicator,
                                'category': category,
                                'score': features[indicator],
                                'weight': feature_weights[indicator]
                            })
            
            scores[stage] = stage_score
        
        # Normaliser les scores
        total = sum(scores.values())
        if total > 0:
            scores = {k: v/total for k, v in scores.items()}
        
        # D√©terminer le stade
        stage = max(scores.items(), key=lambda x: x[1])[0]
        
        # Messages personnalis√©s
        messages = {
            'healthy': "LANGUE SAINE - Aucun signe pathologique",
            'early': "STADE PR√âCOCE - Surveillance recommand√©e",
            'advanced': "STADE AVANC√â - Consultation urgente"
        }
        
        return {
            'stage': stage,
            'confidence': scores[stage],
            'scores': scores,
            'message': messages[stage],
            'features': dict(features),
            'description': DIAGNOSTIC_CRITERIA[stage]['description'],
            'recommendations': DIAGNOSTIC_CRITERIA[stage]['recommendations'],
            'feature_weights': dict(feature_weights)
        }
    
    def analyze_zones(self, detections, img_width, img_height):
        """Analyse d√©taill√©e des zones MTC"""
        zone_analysis = defaultdict(list)
        
        for det in detections:
            bbox = det['bbox']
            cx = ((bbox[0] + bbox[2]) / 2) / img_width
            cy = ((bbox[1] + bbox[3]) / 2) / img_height
            
            # Trouver la zone correspondante
            for zone_name, zone_info in TONGUE_ZONES.items():
                if self.point_in_polygon(cx, cy, zone_info['coords']):
                    zone_analysis[zone_name].append({
                        'feature': det['class_name'],
                        'confidence': det['confidence'],
                        'position': (cx, cy),
                        'bbox': bbox
                    })
                    break
        
        return dict(zone_analysis)
    
    def point_in_polygon(self, x, y, coords):
        """Test si un point est dans un polygone"""
        n = len(coords)
        inside = False
        j = n - 1
        
        for i in range(n):
            xi, yi = coords[i]
            xj, yj = coords[j]
            
            if ((yi > y) != (yj > y)) and (x < (xj - xi) * (y - yi) / (yj - yi) + xi):
                inside = not inside
            j = i
        
        return inside
    
    def show_results(self):
        """Page de r√©sultats professionnelle et d√©taill√©e"""
        if st.session_state.results is None:
            st.warning("‚ö†Ô∏è Aucune analyse en cours. Veuillez d'abord t√©l√©charger une image dans l'onglet Diagnostic.")
            return
        
        results = st.session_state.results
        
        # Header avec r√©sultat principal
        stage = results['diagnosis']['stage']
        confidence = results['diagnosis']['confidence']
        
        if stage == 'healthy':
            bg_color = "#D5F4E6"
            text_color = "#27AE60"
            icon = "‚úÖ"
        elif stage == 'early':
            bg_color = "#FCF3CF"
            text_color = "#F39C12"
            icon = "‚ö†Ô∏è"
        else:
            bg_color = "#FADBD8"
            text_color = "#E74C3C"
            icon = "üö®"
        
        # Afficher info sur le pr√©processing
        preprocessing_info = ""
        if results.get('preprocessing', {}).get('tongue_detected'):
            preprocessing_info = "<p style='margin-top: 0.5rem; font-size: 0.9rem;'>üéØ Langue automatiquement d√©tect√©e et isol√©e</p>"
        
        st.markdown(f"""
        <div style="background: {bg_color}; color: {text_color}; padding: 2rem; 
                    border-radius: 15px; text-align: center; margin-bottom: 2rem;">
            <h1 style="margin: 0;">{icon} {results['diagnosis']['message']}</h1>
            <h2 style="margin: 0.5rem 0;">Confiance: {confidence:.1%}</h2>
            <p style="font-size: 1.2rem; margin: 1rem 0;">
                {results['diagnosis']['description']}
            </p>
            {preprocessing_info}
        </div>
        """, unsafe_allow_html=True)
        
        # Tabs pour les diff√©rentes sections
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä Vue d'ensemble", 
            "üîç D√©tections", 
            "üó∫Ô∏è Cartographie MTC", 
            "üìà Analyse d√©taill√©e",
            "üìã Rapport complet"
        ])
        
        with tab1:
            self.show_overview(results)
        
        with tab2:
            self.show_detections(results)
        
        with tab3:
            self.show_mtc_mapping(results)
        
        with tab4:
            self.show_detailed_analysis(results)
        
        with tab5:
            self.show_report(results)
    
    def show_overview(self, results):
        """Vue d'ensemble des r√©sultats"""
        # Graphique de probabilit√©s
        st.markdown("### üìä Distribution des probabilit√©s")
        
        scores = results['diagnosis']['scores']
        
        fig = go.Figure(data=[
            go.Bar(
                x=['Sain', 'Stade Pr√©coce', 'Stade Avanc√©'],
                y=list(scores.values()),
                text=[f"{v:.1%}" for v in scores.values()],
                textposition='auto',
                marker_color=['#27AE60', '#F39C12', '#E74C3C'],
                marker_line_color='rgb(8,48,107)',
                marker_line_width=1.5
            )
        ])
        
        fig.update_layout(
            xaxis_title="Stade",
            yaxis_title="Probabilit√©",
            yaxis_range=[0, 1],
            showlegend=False,
            height=400,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(size=14)
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Recommandations
        st.markdown("### üí° Recommandations personnalis√©es")
        
        for i, rec in enumerate(results['diagnosis']['recommendations'], 1):
            st.markdown(f"""
            <div class="feature-item">
                <strong>{i}.</strong> {rec}
            </div>
            """, unsafe_allow_html=True)
    
    def show_detections(self, results):
        """Affichage des d√©tections sur l'image"""
        st.markdown("### üîç Caract√©ristiques d√©tect√©es sur la langue")
        
        # Charger et annoter l'image
        image = cv2.imread(results['image_path'])
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        
        # Cr√©er la figure
        fig, ax = plt.subplots(figsize=(12, 10))
        ax.imshow(image_rgb)
        
        # Dessiner les d√©tections
        for det in results['detections']:
            bbox = det['bbox']
            x1, y1, x2, y2 = bbox
            
            # Couleur selon l'impact
            if det['class_name'] in FEATURE_DESCRIPTIONS:
                impact = FEATURE_DESCRIPTIONS[det['class_name']].get('impact', 'neutre')
                if impact == 'positif':
                    color = '#27AE60'
                elif impact == 'neutre':
                    color = '#3498DB'
                elif impact == 'negatif':
                    color = '#F39C12'
                else:  # tres_negatif
                    color = '#E74C3C'
            else:
                color = '#95A5A6'
            
            # Rectangle
            rect = Rectangle((x1, y1), x2-x1, y2-y1,
                           linewidth=3, edgecolor=color, facecolor='none',
                           linestyle='-', alpha=0.8)
            ax.add_patch(rect)
            
            # Label avec fond
            label = f"{det['class_name']}: {det['confidence']:.2f}"
            
            # Fond du label
            text_bbox = dict(boxstyle="round,pad=0.3", facecolor=color, alpha=0.8)
            ax.text(x1, y1-10, label, color='white', fontsize=10,
                   weight='bold', bbox=text_bbox)
        
        ax.axis('off')
        ax.set_title('Analyse visuelle de la langue', fontsize=16, weight='bold', pad=20)
        
        st.pyplot(fig)
        
        # Liste des caract√©ristiques
        st.markdown("### üìã Liste des caract√©ristiques")
        
        # Grouper par cat√©gorie
        categories = {
            'Forme': ['Langue_normal', 'Langue_petite', 'langue_ganfelee'],
            'Couleur': ['Langue_pale', 'Langue_rose', 'Langue_rouge', 'Langue_rouge_foncee'],
            'Enduit': ['enduit_blanc_mince', 'enduit_blanc_epais', 'Eduit_jaune_mince', 'Eduit_jaune_epais'],
            'Points rouges': ['red_dots', 'red_dots_coeur', 'red_dots_foieD', 'red_dots_foieG'],
            'Ecchymoses': ['Ecchymosis_coeur', 'Ecchymosis_foieD', 'Ecchymosis_foieG'],
            'Autres': ['Fissure', 'salive_humide', 'salive_normale']
        }
        
        features = results['diagnosis']['features']
        
        for category, items in categories.items():
            cat_features = {k: v for k, v in features.items() if k in items}
            
            if cat_features:
                st.markdown(f"**{category}**")
                
                cols = st.columns(2)
                for i, (feature, score) in enumerate(sorted(cat_features.items(), 
                                                           key=lambda x: x[1], 
                                                           reverse=True)):
                    col = cols[i % 2]
                    
                    if feature in FEATURE_DESCRIPTIONS:
                        desc = FEATURE_DESCRIPTIONS[feature]
                        impact = desc.get('impact', 'neutre')
                        
                        if impact == 'positif':
                            color = "#27AE60"
                        elif impact == 'neutre':
                            color = "#3498DB"
                        elif impact == 'negatif':
                            color = "#F39C12"
                        else:
                            color = "#E74C3C"
                        
                        with col:
                            st.markdown(f"""
                            <div class="feature-item" style="border-left-color: {color};">
                                <strong>{desc['fr']}</strong><br>
                                <small style="color: #7F8C8D;">{desc['meaning']}</small><br>
                                <span style="color: {color}; font-weight: bold;">
                                    Score: {score:.2f}
                                </span>
                            </div>
                            """, unsafe_allow_html=True)
    
    def show_mtc_mapping(self, results):
        """Cartographie MTC interactive"""
        st.markdown("### üó∫Ô∏è Cartographie selon la M√©decine Traditionnelle Chinoise")
        
        # Cr√©er la visualisation
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
        
        # Cartographie des zones (ax1)
        ax1.set_xlim(0, 1)
        ax1.set_ylim(1, 0)
        ax1.set_aspect('equal')
        
        # Dessiner les zones
        for zone_name, zone_info in TONGUE_ZONES.items():
            coords = zone_info['coords']
            color = zone_info['color']
            
            # Polygon de la zone
            polygon = Polygon(coords, facecolor=color, alpha=0.3,
                            edgecolor='black', linewidth=2)
            ax1.add_patch(polygon)
            
            # Nom de la zone
            cx = np.mean([c[0] for c in coords])
            cy = np.mean([c[1] for c in coords])
            
            # Compter les d√©tections dans cette zone
            zone_detections = results['zone_analysis'].get(zone_name, [])
            count = len(zone_detections)
            
            # Texte avec le nom et le nombre
            text = f"{zone_info['name']}\n({count} signes)"
            ax1.text(cx, cy, text, ha='center', va='center',
                    fontsize=12, weight='bold', color='white',
                    bbox=dict(boxstyle="round,pad=0.5", facecolor=color, alpha=0.8))
        
        # Ajouter les points de d√©tection
        for zone_name, detections in results['zone_analysis'].items():
            for det in detections:
                x, y = det['position']
                
                # Couleur selon le type de d√©tection
                if 'Ecchymosis' in det['feature']:
                    marker_color = '#E74C3C'
                    marker = 'X'
                elif 'red_dots' in det['feature']:
                    marker_color = '#F39C12'
                    marker = 'o'
                else:
                    marker_color = '#3498DB'
                    marker = 's'
                
                ax1.scatter(x, y, s=150, c=marker_color, marker=marker,
                          edgecolors='white', linewidths=2, alpha=0.8)
        
        ax1.set_xlabel('Gauche ‚Üê ‚Üí Droite', fontsize=14)
        ax1.set_ylabel('Base ‚Üê ‚Üí Pointe', fontsize=14)
        ax1.set_title('Localisation des signes sur les zones MTC', fontsize=16, weight='bold')
        ax1.grid(True, alpha=0.3)
        
        # Analyse par zone (ax2)
        zone_scores = {}
        for zone_name in TONGUE_ZONES.keys():
            detections = results['zone_analysis'].get(zone_name, [])
            score = sum(d['confidence'] for d in detections)
            zone_scores[TONGUE_ZONES[zone_name]['name']] = score
        
        # Graphique en barres
        zones = list(zone_scores.keys())
        scores = list(zone_scores.values())
        colors = [TONGUE_ZONES[z]['color'] for z in TONGUE_ZONES.keys()]
        
        bars = ax2.bar(zones, scores, color=colors, alpha=0.7, edgecolor='black', linewidth=2)
        
        # Ajouter les valeurs sur les barres
        for bar, score in zip(bars, scores):
            if score > 0:
                ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                        f'{score:.1f}', ha='center', va='bottom', fontsize=12, weight='bold')
        
        ax2.set_xlabel('Zones MTC', fontsize=14)
        ax2.set_ylabel('Score cumul√© des d√©tections', fontsize=14)
        ax2.set_title('Intensit√© des signes par zone', fontsize=16, weight='bold')
        ax2.grid(axis='y', alpha=0.3)
        
        plt.tight_layout()
        st.pyplot(fig)
        
        # Explications des zones
        st.markdown("### üìö Signification des zones")
        
        cols = st.columns(2)
        for i, (zone_name, zone_info) in enumerate(TONGUE_ZONES.items()):
            col = cols[i % 2]
            
            with col:
                zone_detections = results['zone_analysis'].get(zone_name, [])
                
                st.markdown(f"""
                <div class="info-card" style="border-left: 5px solid {zone_info['color']};">
                    <h4 style="color: {zone_info['color']};">{zone_info['name']}</h4>
                    <p><strong>Description:</strong> {zone_info['description']}</p>
                    <p><strong>Sympt√¥mes associ√©s:</strong> {zone_info['symptoms']}</p>
                    <p><strong>D√©tections:</strong> {len(zone_detections)} signe(s)</p>
                </div>
                """, unsafe_allow_html=True)
    
    def show_detailed_analysis(self, results):
        """Analyse d√©taill√©e avec graphiques avanc√©s"""
        st.markdown("### üìà Analyse approfondie")
        
        # Radar chart des caract√©ristiques
        st.markdown("#### üéØ Profil des caract√©ristiques")
        
        # Pr√©parer les donn√©es pour le radar
        categories_radar = {
            'Forme': ['Langue_normal', 'Langue_petite', 'langue_ganfelee'],
            'Couleur': ['Langue_pale', 'Langue_rose', 'Langue_rouge', 'Langue_rouge_foncee'],
            'Enduit': ['enduit_blanc_mince', 'enduit_blanc_epais', 'Eduit_jaune_mince', 'Eduit_jaune_epais'],
            'Inflammation': ['red_dots', 'red_dots_coeur', 'red_dots_foieD', 'red_dots_foieG'],
            'Stase': ['Ecchymosis_coeur', 'Ecchymosis_foieD', 'Ecchymosis_foieG']
        }
        
        radar_values = []
        radar_labels = []
        
        for category, features in categories_radar.items():
            total_score = sum(results['diagnosis']['features'].get(f, 0) for f in features)
            radar_values.append(total_score)
            radar_labels.append(category)
        
        # Cr√©er le radar chart
        fig = go.Figure()
        
        fig.add_trace(go.Scatterpolar(
            r=radar_values,
            theta=radar_labels,
            fill='toself',
            name='Profil actuel',
            line_color='#667eea'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, max(radar_values) * 1.2] if radar_values else [0, 1]
                )),
            showlegend=False,
            height=500,
            title="Profil des caract√©ristiques d√©tect√©es"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Timeline des risques
        st.markdown("#### ‚è±Ô∏è √âvaluation temporelle")
        
        stage = results['diagnosis']['stage']
        
        if stage == 'healthy':
            risk_level = 20
            color = '#27AE60'
            message = "Risque faible - Maintenir la pr√©vention"
        elif stage == 'early':
            risk_level = 60
            color = '#F39C12'
            message = "Risque mod√©r√© - Surveillance recommand√©e"
        else:
            risk_level = 85
            color = '#E74C3C'
            message = "Risque √©lev√© - Action imm√©diate requise"
        
        # Gauge chart
        fig = go.Figure(go.Indicator(
            mode = "gauge+number+delta",
            value = risk_level,
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "Niveau de risque global"},
            delta = {'reference': 50},
            gauge = {
                'axis': {'range': [0, 100]},
                'bar': {'color': color},
                'steps': [
                    {'range': [0, 33], 'color': "#D5F4E6"},
                    {'range': [33, 66], 'color': "#FCF3CF"},
                    {'range': [66, 100], 'color': "#FADBD8"}
                ],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': 90
                }
            }
        ))
        
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
        st.info(f"üí° {message}")
    
    def show_report(self, results):
        """Rapport complet t√©l√©chargeable"""
        st.markdown("### üìã Rapport de diagnostic complet")
        
        # G√©n√©rer le rapport
        report_content = self.generate_report(results)
        
        # Boutons de t√©l√©chargement
        col1, col2 = st.columns(2)
        
        with col1:
            st.download_button(
                label="üì• T√©l√©charger le rapport (TXT)",
                data=report_content,
                file_name=f"rapport_mtc_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain",
                use_container_width=True
            )
        
        with col2:
            # Cr√©er une version HTML du rapport
            html_report = self.generate_html_report(results)
            st.download_button(
                label="üì• T√©l√©charger le rapport (HTML)",
                data=html_report,
                file_name=f"rapport_mtc_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
                mime="text/html",
                use_container_width=True
            )
        
        # Afficher le rapport
        with st.expander("üìÑ Voir le rapport complet", expanded=True):
            st.text(report_content)
    
    def generate_report(self, results):
        """G√©n√®re le rapport texte"""
        preprocessing_info = ""
        if results.get('preprocessing', {}).get('tongue_detected'):
            preprocessing_info = "\nTRAITEMENT AUTOMATIQUE: Langue d√©tect√©e et isol√©e automatiquement"
        
        report = f"""
================================================================================
                    RAPPORT DE DIAGNOSTIC MTC - CANCER DU SEIN
================================================================================

Date d'analyse: {results['timestamp'].strftime('%d/%m/%Y √† %H:%M')}
Syst√®me: MTC Diagnostic Pro v2.1
D√©velopp√© par: SMAILI Maya & MORSLI Manel - UMMTO 2024/2025{preprocessing_info}

================================================================================
                              R√âSULTAT PRINCIPAL
================================================================================

Diagnostic: {results['diagnosis']['message']}
Niveau de confiance: {results['diagnosis']['confidence']:.1%}

Description clinique:
{results['diagnosis']['description']}

================================================================================
                           SCORES DE PROBABILIT√â
================================================================================

- Langue saine: {results['diagnosis']['scores']['healthy']:.1%}
- Stade pr√©coce (ABC): {results['diagnosis']['scores']['early']:.1%}
- Stade avanc√© (EBC): {results['diagnosis']['scores']['advanced']:.1%}

================================================================================
                        CARACT√âRISTIQUES D√âTECT√âES
================================================================================

Nombre total de signes: {len(results['detections'])}

"""
        
        # D√©tail des caract√©ristiques
        if results['diagnosis']['features']:
            for feature, score in sorted(results['diagnosis']['features'].items(), 
                                       key=lambda x: x[1], reverse=True):
                if feature in FEATURE_DESCRIPTIONS:
                    desc = FEATURE_DESCRIPTIONS[feature]
                    report += f"\n{desc['fr']} ({feature})\n"
                    report += f"  - Signification: {desc['meaning']}\n"
                    report += f"  - Score de d√©tection: {score:.3f}\n"
        
        report += """
================================================================================
                         ANALYSE PAR ZONES MTC
================================================================================
"""
        
        for zone_name, detections in results['zone_analysis'].items():
            if zone_name in TONGUE_ZONES:
                zone_info = TONGUE_ZONES[zone_name]
                report += f"\n{zone_info['name']}\n"
                report += f"  Description: {zone_info['description']}\n"
                report += f"  Nombre de signes: {len(detections)}\n"
                
                if detections:
                    report += "  D√©tails:\n"
                    for det in detections:
                        if det['feature'] in FEATURE_DESCRIPTIONS:
                            report += f"    - {FEATURE_DESCRIPTIONS[det['feature']]['fr']}"
                            report += f" (confiance: {det['confidence']:.2f})\n"
        
        report += """
================================================================================
                            RECOMMANDATIONS
================================================================================
"""
        
        for i, rec in enumerate(results['diagnosis']['recommendations'], 1):
            report += f"\n{i}. {rec}\n"
        
        report += """
================================================================================
                             AVERTISSEMENT
================================================================================

Ce rapport est g√©n√©r√© par un syst√®me d'aide au diagnostic bas√© sur l'intelligence
artificielle et les principes de la M√©decine Traditionnelle Chinoise. Il ne
remplace en aucun cas une consultation m√©dicale professionnelle.

En cas de doute ou de sympt√¥mes inqui√©tants, consultez imm√©diatement un
professionnel de sant√© qualifi√©.

================================================================================
                          FIN DU RAPPORT
================================================================================
"""
        
        return report
    
    def generate_html_report(self, results):
        """G√©n√®re un rapport HTML styl√©"""
        stage = results['diagnosis']['stage']
        
        if stage == 'healthy':
            main_color = "#27AE60"
        elif stage == 'early':
            main_color = "#F39C12"
        else:
            main_color = "#E74C3C"
        
        preprocessing_info = ""
        if results.get('preprocessing', {}).get('tongue_detected'):
            preprocessing_info = """
            <div style="background: #E8F5E9; border: 1px solid #4CAF50; color: #2E7D32; 
                        padding: 15px; border-radius: 5px; margin: 20px 0;">
                <strong>üéØ Traitement automatique:</strong> Langue d√©tect√©e et isol√©e automatiquement
            </div>
            """
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Rapport MTC - {datetime.now().strftime('%d/%m/%Y')}</title>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    max-width: 800px;
                    margin: auto;
                    padding: 20px;
                    background-color: #f5f5f5;
                }}
                .header {{
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 30px;
                    border-radius: 15px;
                    text-align: center;
                    margin-bottom: 30px;
                }}
                .result-box {{
                    background: white;
                    border-left: 5px solid {main_color};
                    padding: 20px;
                    margin: 20px 0;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                .section {{
                    background: white;
                    padding: 20px;
                    margin: 20px 0;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                h2 {{
                    color: #2E4057;
                    border-bottom: 2px solid #e0e0e0;
                    padding-bottom: 10px;
                }}
                .feature {{
                    background: #f8f9fa;
                    padding: 10px;
                    margin: 10px 0;
                    border-radius: 5px;
                    border-left: 3px solid #667eea;
                }}
                .recommendation {{
                    background: #e8f5e9;
                    padding: 15px;
                    margin: 10px 0;
                    border-radius: 5px;
                    border-left: 3px solid #4caf50;
                }}
                .warning {{
                    background: #fff3cd;
                    border: 1px solid #ffeeba;
                    color: #856404;
                    padding: 15px;
                    border-radius: 5px;
                    margin-top: 30px;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Rapport de Diagnostic MTC</h1>
                <p>Analyse de la langue - Cancer du sein</p>
                <p>{results['timestamp'].strftime('%d/%m/%Y √† %H:%M')}</p>
            </div>
            
            {preprocessing_info}
            
            <div class="result-box" style="border-color: {main_color};">
                <h2 style="color: {main_color};">{results['diagnosis']['message']}</h2>
                <p><strong>Confiance:</strong> {results['diagnosis']['confidence']:.1%}</p>
                <p>{results['diagnosis']['description']}</p>
            </div>
            
            <div class="section">
                <h2>Caract√©ristiques d√©tect√©es</h2>
        """
        
        for feature, score in sorted(results['diagnosis']['features'].items(), 
                                   key=lambda x: x[1], reverse=True):
            if feature in FEATURE_DESCRIPTIONS:
                desc = FEATURE_DESCRIPTIONS[feature]
                html += f"""
                <div class="feature">
                    <strong>{desc['fr']}</strong><br>
                    <small>{desc['meaning']}</small><br>
                    <em>Score: {score:.2f}</em>
                </div>
                """
        
        html += """
            </div>
            
            <div class="section">
                <h2>Recommandations</h2>
        """
        
        for rec in results['diagnosis']['recommendations']:
            html += f'<div class="recommendation">{rec}</div>'
        
        html += """
            </div>
            
            <div class="warning">
                <strong>‚ö†Ô∏è Avertissement:</strong> Ce rapport est g√©n√©r√© par un syst√®me 
                d'aide au diagnostic et ne remplace pas une consultation m√©dicale 
                professionnelle.
            </div>
        </body>
        </html>
        """
        
        return html
    
    def show_about(self):
        """Page √Ä propos avec th√®me MTC et sensibilisation"""
        st.markdown("""
        <div class="info-card">
            <h2>üå∏ √Ä propos de MTC Diagnostic Pro ‚Ä¢ ÈóúÊñºÊàëÂÄë</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Mission et vision avec symboles chinois
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("""
            ### üéØ Notre Mission ‚Ä¢ ‰ΩøÂëΩ
            
            D√©mocratiser l'acc√®s au diagnostic pr√©coce du cancer du sein en combinant 
            la sagesse mill√©naire de la M√©decine Traditionnelle Chinoise (‰∏≠ÈÜ´) avec les 
            technologies d'intelligence artificielle les plus avanc√©es.
            
            ### üëÅÔ∏è Notre Vision ‚Ä¢ È°òÊôØ
            
            Un monde o√π chaque femme a acc√®s √† des outils de d√©pistage pr√©coce, 
            non-invasifs et culturellement adapt√©s, permettant une prise en charge 
            rapide et efficace.
            
            ### üÜï Nouveaut√©s Version 2.1
            
            - **üéØ D√©tection automatique de langue** : L'IA peut maintenant analyser des photos de visages
            - **üîç Segmentation avanc√©e** : Isolation pr√©cise de la langue avec SAM
            - **üì± Interface am√©lior√©e** : Exp√©rience utilisateur optimis√©e
            - **üìä Rapports enrichis** : Informations sur le pr√©processing automatique
            
            <div style="margin-top: 2rem; padding: 1rem; background: #FFF5F8; border-radius: 10px; border: 1px solid #FFE4E9;">
                <strong style="color: #D81B60;">üéóÔ∏è Engagement Rose</strong><br>
                Nous soutenons activement la sensibilisation au cancer du sein et 
                l'importance du d√©pistage pr√©coce.
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Logo avec symboles MTC
            st.markdown("""
            <div style="text-align: center; padding: 2rem; background: #FFF5F8; border-radius: 20px; border: 1px solid #FFE4E9;">
                <div style="font-size: 6rem;">üå∏</div>
                <h3 style="color: #D81B60;">MTC Pro</h3>
                <p style="color: #EC407A;">‰∏≠ÈÜ´Ë®∫Êñ∑</p>
                <p style="color: #666666;">Excellence & Innovation</p>
                <hr style="border-color: #FFE4E9;">
                <div style="font-size: 2rem; margin-top: 1rem;">
                    <div>Èô∞ÈôΩ</div>
                    <div style="font-size: 3rem;">‚òØ</div>
                    <small style="color: #666666;">√âquilibre & Harmonie</small>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Technologie avec accent MTC
        st.markdown("### üî¨ Technologie de pointe ‚Ä¢ ÂÖàÈÄ≤ÊäÄË°ì")
        
        tech_cols = st.columns(5)
        
        technologies = [
            ("ü§ñ", "YOLOv11", "Diagnostic MTC ‚Ä¢ ‰∏≠ÈÜ´Ë®∫Êñ∑"),
            ("üéØ", "YOLOv8", "D√©tection langue ‚Ä¢ ËàåÈ†≠Ê™¢Ê∏¨"),
            ("üé≠", "SAM", "Segmentation ‚Ä¢ ÂàÜÂâ≤"),
            ("‚òØ", "5 ÂçÄÂüü", "Zones traditionnelles"),
            ("üìä", "ML Â≠∏Áøí", "Apprentissage continu")
        ]
        
        for col, (icon, title, desc) in zip(tech_cols, technologies):
            with col:
                st.markdown(f"""
                <div class="info-card" style="text-align: center; border-top: 3px solid #FFB6C1;">
                    <div style="font-size: 2.5rem; color: #D81B60;">{icon}</div>
                    <h4 style="color: #333333; font-size: 1rem;">{title}</h4>
                    <p style="font-size: 0.8rem; color: #666666;">{desc}</p>
                </div>
                """, unsafe_allow_html=True)
        
        # Workflow d√©taill√©
        st.markdown("### üîÑ Workflow d'analyse ‚Ä¢ ÂàÜÊûêÊµÅÁ®ã")
        
        workflow_steps = [
            ("üì∑", "Upload", "Photo de visage ou langue seule"),
            ("üîç", "D√©tection", "YOLOv8 trouve la langue automatiquement"),
            ("üé≠", "Segmentation", "SAM isole la langue (optionnel)"),
            ("ü§ñ", "Analyse", "YOLOv11 MTC d√©tecte 21 caract√©ristiques"),
            ("üìä", "Diagnostic", "Rapport complet selon principes MTC")
        ]
        
        cols = st.columns(len(workflow_steps))
        for col, (icon, title, desc) in zip(cols, workflow_steps):
            with col:
                st.markdown(f"""
                <div style="text-align: center; padding: 1rem;">
                    <div style="font-size: 3rem; color: #FFB6C1;">{icon}</div>
                    <h4 style="color: #333333; margin: 0.5rem 0;">{title}</h4>
                    <p style="font-size: 0.9rem; color: #666666; margin: 0;">{desc}</p>
                </div>
                """, unsafe_allow_html=True)
        
        # √âquipe avec th√®me rose
        st.markdown("### üë• √âquipe de d√©veloppement ‚Ä¢ ÈñãÁôºÂúòÈöä")
        
        st.markdown("""
        <div class="info-card" style="background: linear-gradient(135deg, #FFB6C1 0%, #FFC1CC 100%); 
                                     color: white; text-align: center;">
            <h3 style="color: white;">SMAILI Maya & MORSLI Manel</h3>
            <p style="font-size: 1.1rem; color: white;">
                √âtudiantes en Master 2 - Syst√®mes Informatiques Intelligents<br>
                Universit√© Mouloud Mammeri de Tizi-Ouzou (UMMTO)<br>
                Promotion 2024/2025
            </p>
            <hr style="border-color: white; opacity: 0.3;">
            <p style="margin-top: 1rem; color: white;">
                <strong>Encadr√© par:</strong> Mme Y. YESLI Yasmine<br>
                D√©partement d'Informatique - Facult√© de G√©nie √âlectrique et d'Informatique
            </p>
            <div style="margin-top: 1.5rem; font-size: 1.5rem; color: white;">
                Â∏åÊúõ ‚Ä¢ Espoir ‚Ä¢ Hope
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Changelog Version 2.1
        st.markdown("### üìù Nouveaut√©s Version 2.1 ‚Ä¢ Êõ¥Êñ∞Êó•Ë™å")
        
        changelog = [
            "üéØ D√©tection automatique de langue sur photos de visages",
            "üé≠ Int√©gration du mod√®le SAM pour segmentation pr√©cise",
            "üîç Support des mod√®les YOLOv8 personnalis√©s (bestYolo8.pt)",
            "üì± Interface utilisateur am√©lior√©e avec options de traitement",
            "üìä Rapports enrichis avec informations de pr√©processing",
            "‚öôÔ∏è Configuration automatique avec fallback intelligent",
            "üîß Sidebar avec √©tat des modules en temps r√©el",
            "üíæ Sauvegarde automatique des images trait√©es"
        ]
        
        for item in changelog:
            st.markdown(f"- {item}")
        
        # Principes MTC
        st.markdown("### üìö Principes de la MTC ‚Ä¢ ‰∏≠ÈÜ´ÂéüÁêÜ")
        
        principles = [
            "Êúõ (W√†ng) - Observer : Examen visuel de la langue",
            "ËÅû (W√©n) - √âcouter et Sentir : Analyse des sons et odeurs",
            "Âïè (W√®n) - Questionner : Interrogation sur les sympt√¥mes",
            "Âàá (Qi√®) - Palper : Prise du pouls et palpation",
            "Èô∞ÈôΩ (Yƒ´n Y√°ng) - √âquilibre des forces oppos√©es",
            "‰∫îË°å (W«î X√≠ng) - Th√©orie des cinq √©l√©ments"
        ]
        
        for principle in principles:
            st.markdown(f"- {principle}")
        
        # Contact avec th√®me rose
        st.markdown("### üìß Contact et support ‚Ä¢ ËÅØÁπ´ÊàëÂÄë")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style="background: #FFF5F8; padding: 1rem; border-radius: 10px; border: 1px solid #FFE4E9;">
                üìß Email: mtc.diagnostic@ummto.dz
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div style="background: #FFF5F8; padding: 1rem; border-radius: 10px; border: 1px solid #FFE4E9;">
                üåê Web: www.ummto.dz/mtc-diagnostic
            </div>
            """, unsafe_allow_html=True)
        
        # Avertissement avec symbole d'espoir
        st.markdown("""
        <div class="warning" style="background: #FFF5F8; border: 1px solid #FFE4E9; 
                                   color: #666666; padding: 20px; border-radius: 10px; 
                                   margin-top: 30px; text-align: center;">
            <h4 style="color: #D81B60;">‚öñÔ∏è Avertissement l√©gal ‚Ä¢ Ê≥ïÂæãËÅ≤Êòé</h4>
            <p>
                Ce syst√®me est d√©velopp√© √† des fins de recherche et d'√©ducation. 
                Il ne doit pas √™tre utilis√© comme unique source de diagnostic m√©dical. 
                Consultez toujours un professionnel de sant√© qualifi√© pour tout 
                probl√®me m√©dical.
            </p>
            <hr style="border-color: #FFE4E9;">
            <p style="margin-top: 1rem;">
                <strong>üéóÔ∏è Ensemble, nous pouvons faire la diff√©rence</strong><br>
                <span style="color: #D81B60;">Â∏åÊúõÊ∞∏Â≠ò ‚Ä¢ L'espoir demeure</span>
            </p>
        </div>
        """, unsafe_allow_html=True)

# ============================================================================
# FONCTION PRINCIPALE
# ============================================================================

def main():
    """Point d'entr√©e de l'application"""
    app = MTCDiagnosticApp()
    app.run()

# ============================================================================
# SIDEBAR MODIFI√âE AVEC INFORMATIONS SUR LES MODULES
# ============================================================================

with st.sidebar:
    st.markdown("""
    ### üå∏ MTC Diagnostic Pro
    ### ‰∏≠ÈÜ´Ë®∫Êñ∑Á≥ªÁµ±
    
    **Version:** 2.1  
    **Derni√®re mise √† jour:** Juin 2025
    
    ---
    
    ### üîß Modules disponibles
    """)
    
    # V√©rifier les modules
    modules_status = check_tongue_processing_availability()
    
    # IA Principal
    if st.session_state.get('model'):
        st.success("‚úÖ IA MTC - Actif")
    else:
        st.error("‚ùå IA MTC - Inactif")
    
    # D√©tection de langue
    if modules_status['bestYolo8_exists']:
        st.success("‚úÖ D√©tection langue - Disponible")
    else:
        st.warning("‚ö†Ô∏è D√©tection langue - bestYolo8.pt manquant")
    
    # SAM
    if modules_status['sam_available']:
        st.success("‚úÖ SAM - Disponible")
    else:
        st.info("‚ÑπÔ∏è SAM - Non install√©")
    
    # YOLOv8 de base
    if modules_status['yolo_available']:
        st.success("‚úÖ YOLOv8 - Disponible")
    else:
        st.warning("‚ö†Ô∏è YOLOv8 - Non install√©")
    
    st.markdown("""
    ---
    
    ### üìä Áµ±Ë®à ‚Ä¢ Statistiques
    """)
    
    # Afficher des statistiques si une analyse est en cours
    if st.session_state.get('results'):
        results = st.session_state.results
        
        st.metric("Confiance ‰ø°ÂøÉ", f"{results['diagnosis']['confidence']:.1%}")
        st.metric("D√©tections Ê™¢Ê∏¨", len(results['detections']))
        st.metric("Zones affect√©es ÂΩ±Èüø", len(results['zone_analysis']))
        
        # Info sur le pr√©processing
        if results.get('preprocessing', {}).get('tongue_detected'):
            st.success("üéØ Langue auto-d√©tect√©e")
        else:
            st.info("üì∑ Image originale")
    else:
        st.info("Aucune analyse en cours ‚Ä¢ ÁÑ°ÂàÜÊûê")
    
    st.markdown("""
    ---
    
    ### ‚öôÔ∏è Configuration
    """)
    
    # Options de configuration
    if st.checkbox("üîß Mode d√©veloppeur", help="Affiche les informations techniques"):
        st.markdown("**Chemins des mod√®les:**")
        st.code("MTC: mtc_models/yolov11_mtc/weights/best.pt")
        st.code("Langue: bestYolo8.pt")
        st.code("SAM: sam_vit_h_4b8939.pth")
        
        if st.session_state.get('results'):
            st.markdown("**Derni√®re analyse:**")
            st.code(f"Timestamp: {st.session_state.results['timestamp']}")
            if st.session_state.results.get('preprocessing'):
                st.code("Preprocessing: Activ√©")
    
    st.markdown("""
    ---
    
    ### üîó Liens rapides ‚Ä¢ Âø´ÈÄüÈÄ£Áµê
    - [Guide MTC ‚Ä¢ ‰∏≠ÈÜ´ÊåáÂçó](#)
    - [FAQ ‚Ä¢ Â∏∏Ë¶ãÂïèÈ°å](#)
    - [Support ‚Ä¢ ÊîØÊè¥](#)
    
    ---
    
    ### üå∏ Sensibilisation
    <div style="text-align: center; padding: 1rem; background: #FFF5F8; border-radius: 10px; margin: 1rem 0; border: 1px solid #FFE4E9;">
        <div style="font-size: 3rem;">üéóÔ∏è</div>
        <strong style="color: #D81B60;">Octobre Rose</strong><br>
        <small style="color: #666666;">Ensemble contre le cancer du sein<br>
        ÂÖ±ÂêåÂ∞çÊäó‰π≥ËÖ∫Áôå</small>
    </div>
    
    <small style="color: #666666;">
    D√©velopp√© avec ‚ù§Ô∏è par<br>
    SMAILI Maya & MORSLI Manel<br>
    UMMTO 2024/2025<br>
    <span style="color: #D81B60;">Â∏åÊúõ ‚Ä¢ Espoir ‚Ä¢ Hope</span>
    </small>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
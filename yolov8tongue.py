# -*- coding: utf-8 -*-
"""YOLOv8Tongue.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SvjnuOtRUNHeIx9usIHu0i1csAj1-NT4
"""

#  Importer les modules
from ultralytics import YOLO
import pandas as pd
import matplotlib.pyplot as plt
import os

# D√©finir le dataset
dataset = "datayolo/data.yaml"  # Remplace par ton dataset YOLOv8

# Charger YOLOv8 en mode CPU
device = "cpu"  # Mode CPU uniquement
model = YOLO("yolov8s-seg.pt").to(device)

model.train(
    data=dataset,  # Maintenant, data.yaml inclut les hyperparam√®tres
    epochs=20,
    batch=8,
    imgsz=640,
    augment=True,
    device="cpu"  # CPU uniquement
)


# Visualiser les r√©sultats
results_file = "runs/segment/train/results.csv"

if os.path.exists(results_file):
    metrics = pd.read_csv(results_file)

    plt.figure(figsize=(10,5))

    plt.subplot(1,2,1)
    plt.plot(metrics["epoch"], metrics["metrics/mAP50(B)"], label="mAP@50")
    plt.plot(metrics["epoch"], metrics["metrics/mAP50-95(B)"], label="mAP@50:95")
    plt.title("√âvolution du mAP")
    plt.xlabel("√âpoques")
    plt.ylabel("mAP")
    plt.legend()

    plt.subplot(1,2,2)
    plt.plot(metrics["epoch"], metrics["metrics/recall(B)"], label="Recall")
    plt.plot(metrics["epoch"], metrics["metrics/precision(B)"], label="Pr√©cision")
    plt.title("√âvolution du Recall & Pr√©cision")
    plt.xlabel("√âpoques")
    plt.ylabel("Valeur")
    plt.legend()

    plt.show()

else:
    print("Fichier des m√©triques introuvable, v√©rifie ton entra√Ænement.")

#  Sauvegarde du mod√®le entra√Æn√©
model.export(format="onnx", save_dir="yolo_trained_cpu")
print("Mod√®le YOLOv8 entra√Æn√© avec succ√®s sur CPU !")

import cv2
import matplotlib.pyplot as plt
from ultralytics import YOLO
import numpy as np
import json
from IPython.display import display
from PIL import Image

# Charger le mod√®le YOLO entra√Æn√©
model = YOLO("runs/segment/train5/weights/best.pt")

# D√©finir le chemin de l'image de test
test_image = "dataset/ABC_1_png.rf.84a392f435d8c241c7ec3b834dcf5fdc.jpg"
output_image = "ABC1.jpg"
json_output = "ABC1_annotations.json"

# Charger et v√©rifier l'image
img = cv2.imread(test_image)
if img is None:
    raise ValueError(f"L'image '{test_image}' n'a pas pu √™tre charg√©e. V√©rifie le chemin.")

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Appliquer la pr√©diction YOLO
results = model(test_image)
img_with_preds = np.array(results[0].plot(), dtype=np.uint8)

# Enregistrer l'image avec les pr√©dictions
cv2.imwrite(output_image, cv2.cvtColor(img_with_preds, cv2.COLOR_RGB2BGR))
print(f"Image enregistr√©e sous '{output_image}'")

# Extraire les annotations et les enregistrer dans un fichier JSON
annotations = []
for result in results:
    for box in result.boxes:
        annotations.append({
            "class": int(box.cls),
            "confidence": float(box.conf),
            "bbox": box.xywh.tolist()  # Format [x, y, width, height]
        })

with open(json_output, "w") as f:
    json.dump(annotations, f, indent=4)

print(f"Annotations enregistr√©es sous '{json_output}'")

# Afficher l'image avec les pr√©dictions
display(Image.open(output_image))

# Alternative pour afficher avec Matplotlib
plt.imshow(img_with_preds)
plt.title("Essai")
plt.axis("off")
plt.show()

import cv2
import matplotlib.pyplot as plt
from ultralytics import YOLO
import numpy as np
from IPython.display import display
from PIL import Image

#  Charger le mod√®le YOLO entra√Æn√©
model = YOLO("runs/segment/train4/weights/best.pt")

#  D√©finir le chemin de l'image de test
test_image = "trail2.png"
output_image = "trail2_predicted2.jpg"  # üîπ Nom du fichier de sortie

#  Charger et v√©rifier l'image
img = cv2.imread(test_image)
if img is None:
    raise ValueError(f"L'image '{test_image}' n'a pas pu √™tre charg√©e. V√©rifie le chemin.")

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Appliquer la pr√©diction YOLO
results = model(test_image)
img_with_preds = np.array(results[0].plot(), dtype=np.uint8)  # üîπ Convertir en tableau numpy

#  Enregistrer l'image avec les pr√©dictions
cv2.imwrite(output_image, cv2.cvtColor(img_with_preds, cv2.COLOR_RGB2BGR))
print(f" Image enregistr√©e sous '{output_image}'")

#  Afficher l'image avec les pr√©dictions dans Jupyter Notebook
display(Image.open(output_image))

#  Alternative pour afficher avec Matplotlib (si n√©cessaire)
plt.imshow(img_with_preds)
plt.title('Essai')
plt.axis('off')
plt.show()

from PIL import Image
import matplotlib.pyplot as plt

# Charger l'image
img1 = Image.open("trail1_predicted.jpg")
img1 = np.array(img1)

img2 = Image.open("trail2_predicted1.jpg")
img2 = np.array(img2)


# Afficher l'image originale et l'image filtr√©e
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
axes[0].imshow(img1)
axes[0].set_title('Image Originale')
axes[1].imshow(img2)
axes[1].set_title('YOLOv8s avec batch=4 et 10 epochs')

plt.show()

